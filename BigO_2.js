// 1번째 챕터에서 시간으로 비교하는 것에는 정확하지 않다는 것을 알게되었다.
// 그래서 어떻게 비교해야지 좋은 코드를 찾을 수 있을까?

// ** 컴퓨터가 처리해야하는 연산 갯수를 카운팅한다. **
// 어떤 컴퓨터를 사용해도 사양과 상관없이 연산 갯수는 변하지 않기 때문이다.


// ****************************************************************
// (= + 전부다 연산이기 때문에 대충 계산한 것)
// first Example

function addUpTo(n) {
    let total = 0;
    for (let i = 1; i <= n; i++){
        total += i;
    }
    return total;
}

// 더하기 하나와 i++도 연산이기 때문에 루프안에 있기 때문에 N의 값에 따라서 
// 연산의 갯수가 달라진다.
// N이 커질 수록 연산의 갯수가 엄청 늘어난다.

// Second Example

function addUpTo2(n) {
    return n * (n+1)/2;
}
// 곱하기 하나 더하기 하나 나누기 하나
// N이 크기가 얼마이든지 3번만 이루어진다.

// https://rithmschool.github.io/function-timer-demo/
// 시간 복잡도 시각화
// 첫번째 코드와 두번째 코드를 비교했을 때 확인